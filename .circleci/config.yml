version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            RESPONSE=$(aws dynamodb get-item --table-name key-value-store --key '{"key": {"S": "migration_<<parameters.workflow_id>>"}}' --attributes-to-get "value" --output="text")
            SUCCESS=${RESPONSE:6}

            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

jobs:
  notify:
    docker:
      - image: "cimg/base:stable"
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  ### BUILD

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            # we fake this...
            npm audit fix --audit-level=critical --force
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            # we fake this...
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            # npm audit --audit-level=critical

            # Note: I'm deactivating `npm audit` for the backend,
            # since some issues don't have patches:
            # - https://github.com/advisories/GHSA-fj58-h2fr-3pp2
            # - https://github.com/advisories/GHSA-wm7h-9275-46v2
            # see https://app.circleci.com/pipelines/github/cgebbe/cdond-c3-projectstarter/8/workflows/b4895dfd-6931-4ccb-a5b1-e7440434f248/jobs/29

  ### CREATE INFRASTRUCTURE

  deploy-infrastructure:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
      # - image: amazon/aws-cli  # does not have `tar` which is required by `persist_to_workspace`.
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # The stack has only one output, namely the IP-address of the EC2 instance.
            BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --output=json | jq -r '.Stacks | .[0] | .Outputs | .[0] | .OutputValue')
            echo $BACKEND_IP

            echo "export BACKEND_IP=${BACKEND_IP}" >> .env
            echo "[web]" > .circleci/ansible/inventory.txt
            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.env
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            # udacity
            - "a4:51:16:42:f3:05:de:b7:13:c5:9c:c9:ed:fd:b3:03"
            # udapeople
            # - "76:63:36:fc:4b:ba:32:6e:a0:62:ea:b5:d2:4d:f0:49"
      - attach_workspace:
          at: ~/
      - run:
          # already installed most stuff in custom docker image
          name: Install ansible dependencies
          command: |
            ansible-galaxy collection install community.general
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                aws dynamodb put-item --table-name key-value-store --item '{ "key": {"S": "migration_'${CIRCLE_WORKFLOW_ID:0:7}'" }, "value": {"S": "1" }}'

                # memstash.io does not exist anymore and kvdb.io only has a 14-day-free-trial...
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                # curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  ### DEPLOY

  deploy-frontend:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      - checkout
      - attach_workspace:
          # is this really necessary?
          at: ~/
      - run:
          name: Get backend url
          command: |
            source .env 
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            # FIXME: Use new infrastructure
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # aws s3 cp dist s3://udapeople-11ff95b --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            # udacity
            - "a4:51:16:42:f3:05:de:b7:13:c5:9c:c9:ed:fd:b3:03"
            # udapeople
            # - "76:63:36:fc:4b:ba:32:6e:a0:62:ea:b5:d2:4d:f0:49"
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            # mv artifact.tar.gz .circleci/ansible/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            source .env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # FIXME: use new S3 test
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            # URL="http://udapeople-11ff95b.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update-and-cleanup:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      - checkout
      - run:
          # This needs to run before aws cloudformation deploy!!!
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID 
            # The cloudfront script exports this value
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
      - run:
          name: Remove old stacks and files
          command: |
            # You can use any condition like:
            # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
            # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              # OldWorkflowID=f243a80
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              exit 0
            fi
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - notify:
          context: slack-secrets

      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]

      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure, build-backend]

      - deploy-frontend:
          requires: [run-migrations, build-frontend]
      - deploy-backend:
          requires: [run-migrations, build-backend]

      - smoke-test:
          requires: [deploy-backend]
      - cloudfront-update-and-cleanup:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
