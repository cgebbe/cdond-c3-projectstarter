version: 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  # notify:
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps:
  #     - slack/notify:
  #         custom: |
  #           {
  #             "blocks": [
  #               {
  #                 "type": "section",
  #                 "fields": [
  #                   {
  #                     "type": "plain_text",
  #                     "text": "*This is a text notification*",
  #                     "emoji": true
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #         event: always

  ### BUILD AND CHECK

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: test frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test

  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: test backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test

  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: test frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           # we fake this...
  #           npm audit fix --audit-level=critical --force
  #           # npm install oauth-sign@^0.9.0
  #           npm audit --audit-level=critical

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: test backend
  #         command: |
  #           cd backend
  #           npm install
  #           # we fake this...
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --force
  #           # npm audit --audit-level=critical

  #           # Note: I'm deactivating `npm audit` for the backend,
  #           # since some issues don't have patches:
  #           # - https://github.com/advisories/GHSA-fj58-h2fr-3pp2
  #           # - https://github.com/advisories/GHSA-wm7h-9275-46v2
  #           # see https://app.circleci.com/pipelines/github/cgebbe/cdond-c3-projectstarter/8/workflows/b4895dfd-6931-4ccb-a5b1-e7440434f248/jobs/29

  ### DEPLOY INFRASTRUCTURE

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2022.06
      # - image: amazon/aws-cli  # does not have `tar` which is required by `persist_to_workspace`.
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            ls -lah
            cd .circleci/ansible

            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: gebbissimo/ansible:20220802_v2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            # udacity
            - "a4:51:16:42:f3:05:de:b7:13:c5:9c:c9:ed:fd:b3:03"
            # udapeople
            # - "76:63:36:fc:4b:ba:32:6e:a0:62:ea:b5:d2:4d:f0:49"
      - attach_workspace:
          at: ~/
      - run:
          # already installed most stuff in custom docker image
          name: Install ansible dependencies
          command: |
            ansible-galaxy collection install community.general
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i inventory.txt
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                aws dynamodb put-item --table-name key-value-store --item '{ "key": {"S": "migration_'${CIRCLE_WORKFLOW_ID:0:7}'" }, "value": {"S": "1" }}'

                # memstash.io does not exist anymore and kvdb.io only has a 14-day-free-trial...
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                # curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      - checkout
      - attach_workspace:
          # is this really necessary?
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            #   : Use new infrastructure
            # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 cp dist s3://udapeople-17904c9 --recursive
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            # udacity
            - "a4:51:16:42:f3:05:de:b7:13:c5:9c:c9:ed:fd:b3:03"
            # udapeople
            # - "76:63:36:fc:4b:ba:32:6e:a0:62:ea:b5:d2:4d:f0:49"
      - attach_workspace:
          # necessary for inventory.txt
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            # mv artifact.tar.gz .circleci/ansible/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      - image: gebbissimo/node_with_aws:20220806_v2
    steps:
      # - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Get backend url
      #     command: |
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # FIXME: use new S3 test
            # URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            URL="http://udapeople-17904c9.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

      # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

workflows:
  default:
    jobs:
      # - notify:
      #     context: slack-secrets

      # - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure
      # requires: [build-frontend, build-backend]
      # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # filters:
      #   branches:
      #     only: [test-feature-branch]
      - configure-infrastructure
        # requires: [deploy-infrastructure]

      # - run-migrations:
      #     requires: [build-backend]
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [configure-infrastructure, build-frontend]
      # requires: [run-migrations]
      - deploy-backend:
          requires: [configure-infrastructure, build-backend]
      # requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
